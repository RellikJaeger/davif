name: Build debian package on push or release-tags.

on:
  push:
    branches:
      - master
    tags:
      - v*

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2
    - name: Checkout submodules
      shell: bash
      run: |
        sed -i -e 's/git\@github\.com\:/https\:\/\/github.com\//g' .gitmodules
        git submodule init
        git submodule sync --recursive
        git submodule update
        git submodule foreach bash -c "sed -i -e 's/git\@github\.com\:/https\:\/\/github.com\//g' .gitmodules || true"
        git submodule foreach git submodule sync --recursive
        git submodule foreach git submodule init
        git submodule foreach git submodule update --init --force --recursive
    - name: Install gcc-8 g++-8 yasm python3-venv python3-pip python3-setuptools meson ninja
      shell: bash
      run: |
        sudo apt install -y gcc-8 g++-8 yasm debhelper dh-make python3-venv python3-pip python3-setuptools
        python3 -m venv venv
        source venv/bin/activate
        pip3 install wheel
        pip3 install meson
        pip3 install ninja
    - name: build debian package
      shell: bash
      env:
        REF: ${{ github.ref }}
        COMMIT: ${{ github.sha }}
        EVENT: ${{ github.event }}
      run: |
        source venv/bin/activate
        version="unknwon"
        if [ "${EVENT}" -eq "tags" ]; then
          VERSION="${REF:1}"
        else
          VERSION="${COMMIT:0:7}"
        fi
        sed -i -r "s/^(\w+) \(([0-9\.]+)(-[A-Z]+)?\)/\1 (${VERSION})/" debian/changelog
        bash scripts/build-debian-package.sh
    - name: Get debian package name.
      shell: bash
      run: |
        echo "::set-output name=filename::$(basename $(find . -type f -name \*.deb))"
      id: get_deb_name
    - name: Upload result
      uses: actions/upload-artifact@v1
      with:
        name: davif
        path: ${{ steps.get_deb_name.outputs.filename }}
  release:
    if: github.event_name == 'tags'
    needs: build
    runs-on: ubuntu-18.04
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v1
      with:
        name: davif
    - name: Get debian package name.
      shell: bash
      run: |
        echo "::set-output name=filename::$(basename $(find ./davif -type f -name \*.deb))"
      id: get_deb_name
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: true
    - name: Upload Release Asset
      id: upload-release-asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: davif/${{ steps.get_deb_name.outputs.filename }}
        asset_name: ${{ steps.get_deb_name.outputs.filename }}
        asset_content_type: application/vnd.debian.binary-package
